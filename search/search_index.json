{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Ganesh Documents","text":""},{"location":"index.html#overview","title":"Overview","text":"<p>This the documets where all the Cloud, DevOps, DevSecOps, Security, Compliance, Micro service related information is prepared by Ganesh kinkar giri.</p>"},{"location":"index.html#below-are-the-document-present","title":"Below are the document present.","text":"<ul> <li>Cloud</li> <li>DevOps</li> <li>DevSecOps</li> <li>Security</li> <li>Compliance</li> <li>Micro service</li> </ul>"},{"location":"Documentsdetails.html","title":"Documents details","text":""},{"location":"Documentsdetails.html#1resources","title":"1.Resources","text":""},{"location":"Documentsdetails.html#for-jan-jun-2021","title":"For Jan- Jun 2021:","text":""},{"location":"Documentsdetails.html#for-aug-dec-2021","title":"For Aug - Dec 2021 :","text":""},{"location":"Documentsdetails.html#2-team-accomplishments","title":"2. TEAM  Accomplishments","text":""},{"location":"Documentsdetails.html#3-skills","title":"3. Skills","text":""},{"location":"Documentsdetails.html#4-tools-used","title":"4. Tools Used","text":""},{"location":"Devops/tools/CQT/Sonarqube.html","title":"SonarQube","text":""},{"location":"Devops/tools/CQT/Sonarqube.html#how-to-install-sonarqube-on-ubuntu-2004-lts","title":"How to Install SonarQube on Ubuntu 20.04 LTS","text":"<ul> <li> <p>Prerequisites:</p> <ul> <li>Ubuntu 20.04 LTS with minimum 2GB RAM and 1 CPU.</li> <li>PostgreSQL Version 9.3 or higher</li> <li>SSH access with sudo privileges</li> <li>Firewall Port: 9000</li> </ul> </li> <li> <p>Hardware requirements:</p> <ol> <li>A small-scale (individual or small team) instance of the SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS. If you are installing an instance for a large      team or an enterprise, please consider the additional recommendations below.</li> <li>The amount of disk space you need will depend on how much code you analyze with SonarQube.</li> <li>SonarQube must be installed on hard drives that have excellent read &amp; write performance. Most importantly, the \"data\" folder houses the Elasticsearch indices on which a huge amount of I/O will be               done when the server is up and running. Read and write hard drive performance will therefore have a big impact on the overall SonarQube server performance.</li> </ol> </li> </ul> <pre><code>sudo sysctl -w vm.max_map_count=262144\n</code></pre> <pre><code>sudo sysctl -w fs.file-max=65536\n</code></pre> <pre><code>ulimit -n 65536\n</code></pre> <pre><code>ulimit -u 4096\n</code></pre> <p>To Increase the vm.max_map_count kernal ,file discriptor and ulimit permanently . Open the below config file and Insert the below value as shown below,</p> <pre><code>sudo vi /etc/security/limits.conf\n</code></pre> <pre><code>sonarqube - nofile 65536\n</code></pre> <pre><code>sonarqube - nproc 4096\n</code></pre> <ul> <li>Enterprise hardware recommendations: For large teams or enterprise-scale installations of SonarQube, additional hardware is required. At the enterprise level, monitoring your SonarQube instance is essential and should guide further hardware upgrades as your instance grows. A starting configuration should include at least:<ul> <li>8 cores, to allow the main SonarQube platform to run with multiple compute engine workers</li> <li>16GB of RAM For additional requirements and recommendations relating to database and Elasticsearch.</li> </ul> </li> </ul> <p>Supported platforms:     1. Java: The SonarQube server requires Java version 17 and the SonarQube scanners require Java version 11 or 17.     2. Database: PostgreSQL version = 11,12,13,14,15     3. xxxxxx: xxxxx </p> <p>To Increase the vm.max_map_count kernal ,file discriptor and ulimit permanently . Open the below config file and Insert the below value as shown below,</p> <pre><code>sudo vi /etc/security/limits.conf\n</code></pre> <pre><code>sonarqube   -   nofile   65536\nsonarqube   -   nproc    4096\n</code></pre> <p>OR If you are using systemd to manage the sonarqube services then add below value in sonarqube unit file under [service] section.</p> <pre><code>[Service]\n...\nLimitNOFILE=65536\nLimitNPROC=4096\n...\n</code></pre> <p>Before installing, Lets update and upgrade System Packages</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre> <p>Install wget and unzip package</p> <pre><code>sudo apt-get install wget unzip -y\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-1-install-openjdk","title":"Step #1: Install OpenJDK","text":"<p>Install OpenJDK and JRE 11 using following command,</p> <pre><code>sudo apt-get install openjdk-11-jdk -y\nsudo apt-get install openjdk-11-jre -y\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#set-default-jdk","title":"SET Default JDK","text":"<pre><code>sudo update-alternatives --config java\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#check-java-version","title":"Check JAVA Version:","text":"<pre><code>java -version\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-2-install-and-setup-postgresql-10-database-for-sonarqube","title":"Step #2: Install and Setup PostgreSQL 10 Database For SonarQube","text":"<p>Add and download the PostgreSQL Repo</p> <pre><code>sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" &gt;&gt; /etc/apt/sources.list.d/pgdg.list'\nwget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -\n</code></pre> <p>Install the PostgreSQL database Server by using following command,</p> <pre><code>sudo apt-get -y install postgresql postgresql-contrib\n</code></pre> <p>Start PostgreSQL Database server</p> <pre><code>sudo systemctl start postgresql\n</code></pre> <p>Enable it to start automatically at boot time.</p> <pre><code>sudo systemctl enable postgresql\n</code></pre> <p>Change the password for the default PostgreSQL user.</p> <pre><code>sudo passwd postgres\n</code></pre> <p>Switch to the postgres user.</p> <pre><code>su - postgres\n</code></pre> <p>Create a new user by typing:</p> <pre><code>createuser sonar\n</code></pre> <p>Switch to the PostgreSQL shell.</p> <pre><code>psql\n</code></pre> <p>Set a password for the newly created user for SonarQube database.</p> <pre><code>ALTER USER sonar WITH ENCRYPTED password 'sonar';\n</code></pre> <p>Create a new database for PostgreSQL database by running:</p> <pre><code>CREATE DATABASE sonarqube OWNER sonar;\n</code></pre> <p>grant all privileges to sonar user on sonarqube Database.</p> <pre><code>grant all privileges on DATABASE sonarqube to sonar;\n</code></pre> <p>Exit from the psql shell:</p> <pre><code>\\q\n</code></pre> <p>Switch back to the sudo user by running the exit command.</p> <pre><code>exit\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-3-how-to-install-sonarqube-on-ubuntu-2004-lts","title":"Step #3: How to Install SonarQube on Ubuntu 20.04 LTS","text":"<p>Download sonaqube installer files archieve To download latest version of visit SonarQube (https://www.sonarsource.com/products/sonarqube/downloads/)</p> <pre><code>cd /tmp\nsudo https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.1.44547.zip\n</code></pre> <p>Unzip the archeve setup to /opt directory</p> <pre><code>sudo unzip sonarqube-8.9.1.zip -d /opt\n</code></pre> <p>Move extracted setup to /opt/sonarqube directory</p> <pre><code>sudo mv /opt/sonarqube-8.9.1 /opt/sonarqube\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-4-configure-sonarqube","title":"Step #4: Configure SonarQube","text":"<p>We can\u2019t run Sonarqube as a root user , if you run using root user it stops automatically. We have found solution on this to create saparate group and user to run sonarqube.</p>"},{"location":"Devops/tools/CQT/Sonarqube.html#1-create-group-and-user","title":"1. Create Group and User:","text":"<p>Create a group as sonar</p> <pre><code>sudo groupadd sonar\n</code></pre> <p>Now add the user with directory access</p> <pre><code>sudo useradd -c \"user to run SonarQube\" -d /opt/sonarqube -g sonar sonar \nsudo chown sonar:sonar /opt/sonarqube -R\n</code></pre> <p>Open the SonarQube configuration file using your favorite text editor.</p> <pre><code>sudo nano /opt/sonarqube/conf/sonar.properties\n</code></pre> <p>Find the following lines.</p> <pre><code>#sonar.jdbc.username=\n#sonar.jdbc.password=\n</code></pre> <p>Uncomment and Type the PostgreSQL Database username and password which we have created in above steps and add the postgres connection string.</p> <pre><code>vi /opt/sonarqube/conf/sonar.properties\n\n#--------------------------------------------------------------------------------------------------\n\n# DATABASE\n\n#\n\n# IMPORTANT:\n\n# - The embedded H2 database is used by default. It is recommended for tests but not for\n\n#   production use. Supported databases are Oracle, PostgreSQL and Microsoft SQLServer.\n\n# - Changes to database connection URL (sonar.jdbc.url) can affect SonarSource licensed products.\n\n# User credentials.\n\n# Permissions to create tables, indices and triggers must be granted to JDBC user.\n\n# The schema must be created first.\n\nsonar.jdbc.username=sonar\nsonar.jdbc.password=sonar\nsonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#2-start-sonarqube","title":"2. Start SonarQube:","text":"<p>Now to start SonarQube we need to do following: Switch to sonar user</p> <pre><code>sudo su sonar\n</code></pre> <p>Move to the script directory</p> <pre><code>cd /opt/sonarqube/bin/linux-x86-64/\n</code></pre> <p>Run the script to start SonarQube</p> <pre><code>./sonar.sh start\n</code></pre> <p>We can also add this in service and can run as a service.</p>"},{"location":"Devops/tools/CQT/Sonarqube.html#3-check-sonarqube-running-status","title":"3. Check SonarQube Running Status:","text":"<p>To check if sonaqube is running enter below command,</p> <pre><code>./sonar.sh status\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#4-sonarqube-logs","title":"4. SonarQube Logs:","text":"<p>To check sonarqube logs, navigate to /opt/sonarqube/logs/sonar.log directory</p> <pre><code>tail /opt/sonarqube/logs/sonar.log\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-5-configure-systemd-service","title":"Step #5: Configure Systemd service","text":"<p>First stop the SonarQube service as we started manually using above steps Navigate to the SonarQube installed path</p> <pre><code>cd /opt/sonarqube/bin/linux-x86-64/\n</code></pre> <p>Run the script to start SonarQube</p> <pre><code>./sonar.sh stop\n</code></pre> <p>Create a systemd service file for SonarQube to run as System Startup.</p> <pre><code>sudo vi /etc/systemd/system/sonar.service\n\nAdd the below lines,\n\n[Unit]\nDescription=SonarQube service\nAfter=syslog.target network.target\n\n[Service]\nType=forking\n\nExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start\nExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop\n\nUser=sonar\nGroup=sonar\nRestart=always\n\nLimitNOFILE=65536\nLimitNPROC=4096\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Save and close the file. Now stop the sonarqube script earlier we started to run using as daemon. Start the Sonarqube daemon by running:</p> <pre><code>sudo systemctl start sonar\n</code></pre> <p>Enable the SonarQube service to automatically  at boot time System Startup.</p> <pre><code>sudo systemctl enable sonar\n</code></pre> <p>check if the sonarqube service is running,</p> <pre><code>sudo systemctl status sonar\n</code></pre>"},{"location":"Devops/tools/CQT/Sonarqube.html#step-6-access-sonarqube","title":"Step #6: Access SonarQube","text":"<p>To access the SonarQube using browser type server IP followed by port 9000.</p> <pre><code>http://server_IP:9000 OR http://localhost:9000\n</code></pre> <p>Login to SonarQube  with default administrator username and password is admin.</p>"},{"location":"Devops/tools/CQT/Sonarqube.html#ref","title":"Ref:","text":"<p>https://www.fosstechnix.com/how-to-install-sonarqube-on-ubuntu-20-04/</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html","title":"Hashicorp Vault","text":""},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#what-is-vault","title":"What is Vault?","text":"<p>HashiCorp Vault is an identity-based secrets and encryption management system.A secret is anything that you want to tightly control access to, such as API encryption keys, passwords, and certificates. Vault provides encryption services that are gated by authentication and authorization methods. Using Vault\u2019s UI, CLI, or HTTP API, access to secrets and other sensitive data can be securely stored and managed, tightly controlled (restricted), and auditable.</p> <p>A modern system requires access to a multitude of secrets, including database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. It can be difficult to understand who is accessing which secrets, especially since this can be platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.</p> <p>Vault validates and authorizes clients (users, machines, apps) before providing them access to secrets or stored sensitive data.</p> <p></p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#how-does-vault-work","title":"How does Vault work?","text":"<p>Vault works primarily with tokens and a token is associated to the client's policy. Each policy is path-based and policy rules constrains the actions and accessibility to the paths for each client. With Vault, you can create tokens manually and assign them to your clients, or the clients can log in and obtain a token. The illustration below displays Vault's core workflow.</p> <p></p> <p>The core Vault workflow consists of four stages:</p> <ul> <li>Authenticate: Authentication in Vault is the process by which a client supplies information that Vault uses to determine if they are who they say they are. Once the client is authenticated against an auth method, a token is generated and associated to a policy.</li> <li>Validation: Vault validates the client against third-party trusted sources, such as Github, LDAP, AppRole, and more.</li> <li>Authorize: A client is matched against the Vault security policy. This policy is a set of rules defining which API endpoints a client has access to with its Vault token. Policies provide a declarative way to grant or forbid access to certain paths and operations in Vault.</li> <li>Access: Vault grants access to secrets, keys, and encryption capabilities by issuing a token based on policies associated with the client\u2019s identity. The client can then use their Vault token for future operations.</li> </ul>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#why-vault","title":"Why Vault?","text":"<p>Most enterprises today have credentials sprawled across their organizations. Passwords, API keys, and credentials are stored in plain text, app source code, config files, and other locations. Because these credentials live everywhere, the sprawl can make it difficult and daunting to really know who has access and authorization to what. Having credentials in plain text also increases the potential for malicious attacks, both by internal and external attackers.</p> <p>Vault was designed with these challenges in mind. Vault takes all of these credentials and centralizes them so that they are defined in one location, which reduces unwanted exposure to credentials. But Vault takes it a few steps further by making sure users, apps, and systems are authenticated and explicitly authorized to access resources, while also providing an audit trail that captures and preserves a history of clients' actions.</p> <p>The key features of Vault are:</p> <ul> <li> <p>Secure Secret Storage: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, Consul, and more.</p> </li> <li> <p>Dynamic Secrets: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.</p> </li> <li> <p>Data Encryption: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as a SQL database without having to design their own encryption methods.</p> </li> <li> <p>Leasing and Renewal: All secrets in Vault have a lease associated with them. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.</p> </li> <li> <p>Revocation: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.</p> </li> </ul>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#what-is-hcp-vault","title":"What is HCP Vault?","text":"<p>HashiCorp Cloud Platform (HCP) Vault is a hosted version of Vault, which is operated by HashiCorp to allow organizations to get up and running quickly. HCP Vault uses the same binary as self-hosted Vault, which means you will have a consistent user experience. You can use the same Vault clients to communicate with HCP Vault as you use to communicate with a self-hosted Vault.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#use-cases","title":"Use Cases","text":""},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#general-secret-storage","title":"General Secret Storage","text":"<p>As workloads become more and more ephemeral and short-lived, having long-lived static credentials pose a big security threat vector. What if credentials are accidentally leaked, or an employee leaves with their post it notes that contain the AWS access key, or someone checks their S3 access token to a public GH repo? With Vault, you can generate short-lived, just-in-time credentials that are automatically revoked when their time expires. This means users and security teams do not have to worry about manually revoking or changing these credentials.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#static-secrets","title":"Static Secrets","text":"<p>Credentials can be long-lived and static, where they don't change or are changed infrequently. Vault can store these secrets bedhind its cryptographic barrier, and clients can request them to use in their applications.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#dynamic-secrets","title":"Dynamic Secrets","text":"<p>The key value with secrets storage is the ability to dynamically generate credentials. These credentials are created when clients need them. Vault can also manage the lifecycle of these credentials, including but not limited to, deleting them after a defined period of time.</p> <p>In addition to database credential management, Vault can manage your Active Directory accounts, SSH keys, PKI certificates and more.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#dynamic-secrets-database-secrets-engine","title":"Dynamic Secrets: Database Secrets Engine","text":"<p>Vault can generate secrets on-demand for some systems. For example, when an app needs to access an Amazon S3 bucket, it asks Vault for AWS credentials. Vault will generate an AWS credential granting permissions to access the S3 bucket. In addition, Vault will automatically revoke this credential after the time-to-live (TTL) expires.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#challenge","title":"Challenge","text":"<p>Data protection is a top priority, and database credential rotation is a critical part of any data protection initiative. Each role has a different set of permissions granted to access the database. When a system is attacked by hackers, continuous credential rotation becomes necessary and needs to be automated.</p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#solution","title":"Solution","text":"<p>Applications ask Vault for database credentials rather than setting them as environment variables. The administrator specifies the TTL of the database credentials to enforce its validity so that they are automatically revoked when they are no longer used.</p> <p></p>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#personas","title":"Personas","text":"<p>Involves two personas:</p> <ul> <li>admin with privileged permissions to configure secrets engines</li> <li>apps read the secrets from Vault</li> </ul>"},{"location":"Security/Hashicorp-vault/Hashicorp-vault.html#policy-requirements","title":"Policy requirements","text":"<p>Each persona requires a different set of capabilities. These are expressed in policies. If you are not familiar with policies. The admin tasks require these capabilities.</p> <pre><code># Mount secrets engines\npath \"sys/mounts/*\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\" ]\n}\n\n# Configure the database secrets engine and create roles\npath \"database/*\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\" ]\n}\n\n# Manage the leases\npath \"sys/leases/+/database/creds/readonly/*\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\" ]\n}\n\npath \"sys/leases/+/database/creds/readonly\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\" ]\n}\n\n# Write ACL policies\npath \"sys/policies/acl/*\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\" ]\n}\n\n# Manage tokens for verification\npath \"auth/token/create\" {\n  capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\" ]\n}\n</code></pre> <p>The apps tasks require these capabilities.</p> <pre><code># Get credentials from the database secrets engine 'readonly' role.\npath \"database/creds/readonly\" {\n  capabilities = [ \"read\" ]\n}\n</code></pre>"}]}